#!/bin/sh
set -eo pipefail

output_file="test_envs"
jenkins_image="jenkins/jenkins:2.504.1-lts-alpine"
jenkins_container_name="mcp-jenkins-test-env"
jenkins_port="6211"
jenkins_user="testadmin"
jenkins_password="test"
jenkins_url="http://localhost:${jenkins_port}"
jenkins_data_dir="test_jenkins_data"

# Function to run commands and check for errors
run_command() {
    echo "Executing command: $*"
    if ! "$@"; then
        echo "Error: Command failed: $*" >&2
        exit 1
    fi
}

# Check if test environment already exists
if [ -f "${output_file}" ] && [ -d "${jenkins_data_dir}" ] && [ -n "$(ls -A "${jenkins_data_dir}")" ]; then
    echo "--------------------------------------------------"
    echo "Jenkins test environment already exists."
    echo "Credentials in '${output_file}':"
    cat "${output_file}"
    echo ""
    echo "To reinstall the test environment, remove the '${output_file}' file and the '${jenkins_data_dir}' directory."
    echo "--------------------------------------------------"
    exit 0
fi

# Attempt to stop and remove the container if it exists
echo "Attempting to stop and remove existing container '${jenkins_container_name}' if it exists..."
docker rm -f "${jenkins_container_name}" > /dev/null 2>&1 || true
echo "Ensured no conflicting container is running."

echo "Starting Jenkins test environment deployment..."
echo "Pulling Jenkins image (if not already present)..."
run_command docker pull "${jenkins_image}"

echo "Starting Jenkins container '${jenkins_container_name}' on port ${jenkins_port} using host network..."
# Create the secrets directory if it doesn't exist
mkdir -p "${jenkins_data_dir}/secrets"

run_command docker run -d --network=host --name "${jenkins_container_name}" \
    -v "$(pwd)/${jenkins_data_dir}:/var/jenkins_home" \
    -e "JAVA_OPTS=-Djenkins.install.runSetupWizard=true" \
    "${jenkins_image}" --httpPort=${jenkins_port}

echo "Waiting for Jenkins to start at ${jenkins_url} (this may take a few minutes)..."
max_retries=90
retry_count=0
while [ ${retry_count} -lt ${max_retries} ]; do
    if curl -sL --fail -w "%{http_code}" "${jenkins_url}/login" -o /dev/null 2>/dev/null | grep -q "200"; then
        echo "Jenkins is up and running!"
        break
    fi

    retry_count=$((retry_count + 1))
    if [ ${retry_count} -ge ${max_retries} ]; then
        echo "Error: Jenkins did not start within the expected time ($((max_retries * 5)) seconds)." >&2
        echo "Attempting to get logs from container '${jenkins_container_name}':" >&2
        docker logs "${jenkins_container_name}" >&2 || true
        exit 1
    fi

    echo "Jenkins not ready yet (attempt ${retry_count}/${max_retries}). Retrying in 5 seconds..."
    sleep 5
done

echo "Allowing Jenkins an additional 20 seconds to initialize fully..."
sleep 20

echo "Retrieving initial admin password..."
initial_admin_password=""
max_password_retries=60
password_retry_count=0
while [ -z "${initial_admin_password}" ] && [ ${password_retry_count} -lt ${max_password_retries} ]; do
    password_retry_count=$((password_retry_count + 1))
    echo "Attempting to retrieve initial admin password (attempt ${password_retry_count}/${max_password_retries})..."
    initial_admin_password=$(docker exec "${jenkins_container_name}" cat "/var/jenkins_home/secrets/initialAdminPassword" 2>/dev/null || true)
    if [ -n "${initial_admin_password}" ] && [ ${#initial_admin_password} -eq 32 ]; then
        echo "Initial admin password retrieved successfully."
        break
    else
        echo "Password not found or incorrect length (${#initial_admin_password}). Retrying in 5 seconds..."
    fi
    sleep 5
done

if [ -z "${initial_admin_password}" ]; then
    echo "Error: Failed to retrieve initial admin password after ${max_password_retries} attempts." >&2
    docker logs "${jenkins_container_name}" >&2 || true
    exit 1
fi

echo "Initial admin password: ${initial_admin_password}"
echo ""

echo "Creating initial '${output_file}' with basic credentials..."
mkdir -p "$(dirname "${output_file}")" || true
cat > "${output_file}" <<EOF
# Jenkins Test Environment Credentials
# Generated by script
export JENKINS_URL="${jenkins_url}"
export JENKINS_USER="${jenkins_user}"
export JENKINS_PASSWORD="${jenkins_password}"
export JENKINS_API_TOKEN="your-api-token-created-manually"
EOF

echo "--------------------------------------------------"
echo "Jenkins deployment and initial credential file creation complete!"
echo "Initial credentials saved in: $(realpath "${output_file}")"
echo ""
echo "Please manually finalize the Jenkins setup via the UI (${jenkins_url})."
echo "1. Unlock Jenkins using the initial admin password provided above."
echo "2. Install suggested plugins or select plugins."
echo "3. Create the user '${jenkins_user}' with the password '${jenkins_password}'."
echo "4. Manually generate an API token for the user '${jenkins_user}' via the Jenkins UI."
echo "5. Manually add the API token to the '${output_file}' as:"
echo "   export JENKINS_API_TOKEN=\"your_api_token_here\""
echo ""
echo "To stop the Jenkins container: docker stop ${jenkins_container_name}"
echo "To remove the Jenkins container (after stopping): docker rm ${jenkins_container_name}"
echo "To view Jenkins logs: docker logs ${jenkins_container_name}"
echo "--------------------------------------------------"
